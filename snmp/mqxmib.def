-- HEADER --------------------------------------------------------------
-- ---------------------------------------------------------------------
--
--  Copyright (c) 1992-2003 ARC International
--  All rights reserved
--
--  This software embodies materials and concepts which are
--  confidential to ARC International and is made available solely
--  pursuant to the terms of a written license agreement with
--  ARC International.
--
--  File: mqxmib.def
--
--  Comments:  This file contains an implementation of the MQX MIB.
--
-- ---------------------------------------------------------------------
-- END -----------------------------------------------------------------

-- Definitions for MQX-MIB
psti                                    enterprises.4653
mqx                                     psti.1

%% DisplayString OCTET

mqxKernel                               mqx.1
mqxVersion                              mqxKernel.1                             INTEGER         read-only       mandatory
mqxRevision                             mqxKernel.2                             SEQUENCE        not-accessible  mandatory
    mqxRevKernel                        mqxRevision.1                           INTEGER         read-only       mandatory
    mqxRevPSP                           mqxRevision.2                           INTEGER         read-only       mandatory
    mqxRevIO                            mqxRevision.3                           INTEGER         read-only       mandatory
    mqxRevBSP                           mqxRevision.4                           INTEGER         read-only       mandatory
mqxCopyright                            mqxKernel.3                             DisplayString   read-only       mandatory
mqxDate                                 mqxKernel.4                             DisplayString   read-only       mandatory
mqxCPU                                  mqxKernel.5                             SEQUENCE        not-accessible  mandatory
    mqxCPUType                          mqxCPU.1                                INTEGER         read-only       mandatory
    mqxCPUEndian                        mqxCPU.2                                INTEGER         read-only       mandatory
    mqxCPUAddressing                    mqxCPU.3                                INTEGER         read-only       mandatory
mqxProcessorNum                         mqxKernel.6                             INTEGER         read-only       mandatory
mqxConfig                               mqxKernel.7                             SEQUENCE        not-accessible  mandatory
    mqxConfigFloatingPointIO            mqxConfig.1                             INTEGER         read-only       mandatory
    mqxConfigInlineMacros               mqxConfig.2                             INTEGER         read-only       mandatory
    mqxConfigKernelLogging              mqxConfig.3                             INTEGER         read-only       mandatory
    mqxConfigMonitorStack               mqxConfig.4                             INTEGER         read-only       mandatory
    mqxConfigTaskCreationBlocks         mqxConfig.5                             INTEGER         read-only       mandatory
    mqxConfigTaskDestruction            mqxConfig.6                             INTEGER         read-only       mandatory
    mqxConfigComponentDestruction       mqxConfig.7                             INTEGER         read-only       mandatory
    mqxConfigCheckErrors                mqxConfig.8                             INTEGER         read-only       mandatory
    mqxConfigCheckValidity              mqxConfig.9                             INTEGER         read-only       mandatory
    mqxConfigCheckAlloc                 mqxConfig.10                            INTEGER         read-only       mandatory
    mqxConfig64BitInts                  mqxConfig.11                            INTEGER         read-only       mandatory
    mqxConfigPspKernelLogging           mqxConfig.12                            INTEGER         read-only       mandatory
    mqxConfigPspFPRegisters             mqxConfig.13                            INTEGER         read-only       mandatory
    mqxConfig32BitQIDs                  mqxConfig.14                            INTEGER         read-only       mandatory
-- mqxTime                                 mqxKernel.7                             SEQUENCE        not-accessible  mandatory

mqxTask                                 mqx.2
mqxTaskTable                            mqxTask.1                               SEQUENCE        not-accessible  mandatory
mqxTaskEntry                            mqxTaskTable.1                          SEQUENCE        not-accessible  mandatory   mqxTaskID
mqxTaskID                               mqxTaskEntry.1                          INTEGER         read-only       mandatory
mqxTaskCreator                          mqxTaskEntry.2                          INTEGER         read-only       mandatory
mqxTaskName                             mqxTaskEntry.3                          DisplayString   read-only       mandatory
mqxTaskState                            mqxTaskEntry.4                          INTEGER         read-only       mandatory
mqxTaskErrorCode                        mqxTaskEntry.5                          INTEGER         read-only       mandatory
mqxTaskSched                            mqxTaskEntry.6                          SEQUENCE        not-accessible  mandatory
    mqxTaskSchedPriority                mqxTaskSched.1                          INTEGER         read-only       mandatory
    mqxTaskSchedHomePriority            mqxTaskSched.2                          INTEGER         read-only       mandatory
    mqxTaskSchedPolicy                  mqxTaskSched.3                          INTEGER         read-only       mandatory
    mqxTaskSchedTimeSlice               mqxTaskSched.4                          INTEGER         read-only       mandatory
mqxTaskStackSize                        mqxTaskEntry.7                          INTEGER         read-only       mandatory
mqxTaskStackUsed                        mqxTaskEntry.8                          INTEGER         read-only       mandatory
mqxTaskIO                               mqxTaskEntry.9                          SEQUENCE        not-accessible  mandatory
    mqxTaskIOstdin                      mqxTaskIO.1                             DisplayString   read-only       mandatory
    mqxTaskIOstdout                     mqxTaskIO.2                             DisplayString   read-only       mandatory
    mqxTaskIOstderr                     mqxTaskIO.3                             DisplayString   read-only       mandatory
mqxTaskFlag                             mqxTaskEntry.10                         SEQUENCE        not-accessible  mandatory
    mqxTaskFlagFloatingPoint            mqxTaskFlag.1                           INTEGER         read-only       mandatory
    mqxTaskFlagLoggingEnabled           mqxTaskFlag.2                           INTEGER         read-only       mandatory
    mqxTaskFlagWatchdogEnabled          mqxTaskFlag.3                           INTEGER         read-only       mandatory
    mqxTaskFlagPreemptionDisabled       mqxTaskFlag.4                           INTEGER         read-only       mandatory

mqxComponent                            mqx.3

mqxComponentName                        mqxComponent.1
mqxComponentSem                         mqxComponent.2
mqxComponentEvent                       mqxComponent.3
mqxComponentMutex                       mqxComponent.4
mqxComponentTimer                       mqxComponent.5
mqxComponentLog                         mqxComponent.6
mqxComponentWatchdog                    mqxComponent.7
mqxComponentMessage                     mqxComponent.8
mqxComponentPart                        mqxComponent.9
mqxComponentIPC                         mqxComponent.10
mqxComponentQlog                        mqxComponent.11
mqxComponentEDS                         mqxComponent.12

mqxIOC                                  mqx.4

mqxIOCIO                                mqxIOC.1
mqxIOCRTCS                              mqxIOC.2
mqxIOCLAPB                              mqxIOC.3
mqxIOCLAPD                              mqxIOC.4
mqxIOCSDLC                              mqxIOC.5
mqxIOCHDLC                              mqxIOC.6
mqxIOCMFS                               mqxIOC.7
mqxIOCCAN                               mqxIOC.8
mqxIOCPPP                               mqxIOC.9
mqxIOCSNMP                              mqxIOC.10
mqxIOCENET                              mqxIOC.11

%%

#include <stdlib.h>
#include <stddef.h>
#if (MQX_VERSION >= 250)
#include <mem_prv.h>
#include <mqx_prv.h>
#include <gen_rev.h>
#include <psp_rev.h>
#else
#include <mqx_prv.h>
#endif

extern RTCSMIB_NODE MIBNODE_sysObjectID;

boolean MIB_find_mqxTaskEntry
   (
      uint_32        op,
      pointer        index,
      pointer _PTR_  instance
   )
{ /* Body */
   KERNEL_DATA_STRUCT_PTR  kd_ptr = _mqx_get_kernel_data();
   _task_id                tid = (_task_id)*(uint_32_ptr)index;
   TD_STRUCT_PTR           td_ptr = NULL;

   if (op == RTCSMIB_OP_GET) {
      *instance = _task_get_td(tid);
      return (*instance != NULL);
   } /* Endif */

#if (MQX_VERSION >= 240) && (MQX_VERSION < 250)

   { /* Scope */
      TD_POOL_STRUCT_PTR      pool_ptr = (TD_POOL_STRUCT_PTR)&kd_ptr->TD_POOL;
      uint_32                 procnum, tasknum;

      procnum = PROC_NUMBER_FROM_TASKID(tid);
      if (procnum < kd_ptr->PROCESSOR_NUMBER) {
         tasknum = 1;
      } else if (procnum == kd_ptr->PROCESSOR_NUMBER) {
         tasknum = TASK_NUMBER_FROM_TASKID(tid);
         if (tasknum == 0) tasknum = 1;
      } else {
         pool_ptr = NULL;
      } /* Endif */

      for (;;) {
         if (pool_ptr == NULL) {
            break;
         } /* Endif */
         if (tasknum < TD_POOL_SIZE) {
            td_ptr = &pool_ptr->POOL[tasknum];
            break;
         } /* Endif */
         pool_ptr = pool_ptr->NEXT_TD_POOL;
         tasknum -= TD_POOL_SIZE;
      } /* Endfor */

      for (;;) {
         if (td_ptr == NULL) break;
         if (td_ptr->TASK_ID != 0) break;
         tasknum++;
         if (tasknum < TD_POOL_SIZE) {
            td_ptr++;
         } else {
            pool_ptr = pool_ptr->NEXT_TD_POOL;
            if (pool_ptr == NULL) {
               td_ptr = NULL;
               break;
            } /* Endif */
            td_ptr = &pool_ptr->POOL[0];
            tasknum = 0;
         } /* Endif */
      } /* Endfor */

   } /* Endscope */

#elif (MQX_VERSION >= 250)

   { /* Scope */
      QUEUE_ELEMENT_STRUCT_PTR search_ptr;
      uint_32                  td_num;

      search_ptr = kd_ptr->TD_LIST.NEXT;
      td_num = 0;
      for (;;) {
         td_ptr = (TD_STRUCT_PTR)((char_ptr)search_ptr - offsetof(TD_STRUCT, TD_LIST_INFO));
         if (td_ptr->TASK_ID >= tid) {
            break;
         } /* Endif */
         td_num++;
         if (td_num >= kd_ptr->TD_LIST.SIZE) {
            td_ptr = NULL;
            break;
         } /* Endif */
         search_ptr = search_ptr->NEXT;
      } /* Endfor */

   } /* Endscope */

#endif

   if (!td_ptr) {
      return FALSE;
   } /* Endif */

   *(uint_32_ptr)index = td_ptr->TASK_ID;
   *instance = td_ptr;
   return (td_ptr != NULL);

} /* Endbody */

uint_32   MIB_get_mqxTaskID                     (pointer td) {return ((TD_STRUCT_PTR)td)->TASK_ID;}
#if (MQX_VERSION >= 240) && (MQX_VERSION < 250)
uint_32   MIB_get_mqxTaskCreator                (pointer td) {return ((TD_STRUCT_PTR)td)->FATHER;}
uint_32   MIB_get_mqxTaskSchedTimeSlice         (pointer td) {return ((TD_STRUCT_PTR)td)->TIME_SLICE;}
#elif (MQX_VERSION >= 250)
uint_32   MIB_get_mqxTaskCreator                (pointer td) {return ((TD_STRUCT_PTR)td)->PARENT;}
uint_32   MIB_get_mqxTaskSchedTimeSlice         (pointer td) {uint_32 ms; _sched_get_rr_interval(((TD_STRUCT_PTR)td)->TASK_ID,&ms); return ms;}
#endif
uchar_ptr MIB_get_mqxTaskName                   (pointer td) {return (uchar_ptr)((TD_STRUCT_PTR)td)->TASK_TEMPLATE_PTR->TASK_NAME;}
uint_32   MIB_get_mqxTaskState                  (pointer td) {return ((TD_STRUCT_PTR)td)->STATE;}
uint_32   MIB_get_mqxTaskErrorCode              (pointer td) {return ((TD_STRUCT_PTR)td)->TASK_ERROR_CODE;}
uint_32   MIB_get_mqxTaskSchedPriority          (pointer td) {return ((TD_STRUCT_PTR)td)->MY_QUEUE->PRIORITY;}
uint_32   MIB_get_mqxTaskSchedHomePriority      (pointer td) {return ((TD_STRUCT_PTR)td)->HOME_QUEUE->PRIORITY;}
uint_32   MIB_get_mqxTaskSchedPolicy            (pointer td) {return (((TD_STRUCT_PTR)td)->FLAGS & MQX_TIME_SLICE_TASK) ? MQX_SCHED_RR : MQX_SCHED_FIFO;}
uint_32   MIB_get_mqxTaskStackSize              (pointer td) {uint_32 ss,su; _klog_get_task_stack_usage(((TD_STRUCT_PTR)td)->TASK_ID,&ss,&su); return ss;}
uint_32   MIB_get_mqxTaskStackUsed              (pointer td) {uint_32 ss,su; _klog_get_task_stack_usage(((TD_STRUCT_PTR)td)->TASK_ID,&ss,&su); return su;}
uchar_ptr MIB_get_mqxTaskIOstdin                (pointer td) {return (((TD_STRUCT_PTR)td)->STDIN_STREAM)  ? (uchar_ptr)((FILE_PTR)((TD_STRUCT_PTR)td)->STDIN_STREAM)->DEV_PTR->IDENTIFIER  : NULL;}
uchar_ptr MIB_get_mqxTaskIOstdout               (pointer td) {return (((TD_STRUCT_PTR)td)->STDOUT_STREAM) ? (uchar_ptr)((FILE_PTR)((TD_STRUCT_PTR)td)->STDOUT_STREAM)->DEV_PTR->IDENTIFIER : NULL;}
uchar_ptr MIB_get_mqxTaskIOstderr               (pointer td) {return (((TD_STRUCT_PTR)td)->STDERR_STREAM) ? (uchar_ptr)((FILE_PTR)((TD_STRUCT_PTR)td)->STDERR_STREAM)->DEV_PTR->IDENTIFIER : NULL;}
uint_32   MIB_get_mqxTaskFlagFloatingPoint      (pointer td) {return (((TD_STRUCT_PTR)td)->FLAGS & MQX_FLOATING_POINT_TASK)  ? 1 : 0;}
uint_32   MIB_get_mqxTaskFlagLoggingEnabled     (pointer td) {return (((TD_STRUCT_PTR)td)->FLAGS & TASK_LOGGING_ENABLED)     ? 1 : 0;}
uint_32   MIB_get_mqxTaskFlagWatchdogEnabled    (pointer td) {return (((TD_STRUCT_PTR)td)->FLAGS & TASK_WATCHDOG_STARTED)    ? 1 : 0;}
uint_32   MIB_get_mqxTaskFlagPreemptionDisabled (pointer td) {return (((TD_STRUCT_PTR)td)->FLAGS & TASK_PREEMPTION_DISABLED) ? 1 : 0;}


void MIBMQX_init(void)
{ /* Body */
   KERNEL_DATA_STRUCT_PTR kd_ptr = _mqx_get_kernel_data();

/* CR 850 */
#define MIB_set_const(var,val) \
   MIBNODE_ ## var.TYPE = RTCSMIB_NODETYPE_UINT_CONST; \
   MIBNODE_ ## var.GET.UINT_CONST = val

#define MIB_set_ptr(var,type,ptr) \
   MIBNODE_ ## var.TYPE = RTCSMIB_NODETYPE_ ## type ## _PTR; \
   MIBNODE_ ## var.GET.type ## _PTR = ptr

#define MIB_set_fn(var,type) \
   MIBNODE_ ## var.TYPE = RTCSMIB_NODETYPE_ ## type ## _FN; \
   MIBNODE_ ## var.GET.type ## _FN = MIB_get_ ## var

   MIB_set_ptr(   sysObjectID, OID, &MIBNODE_mqx );

   MIB_set_const( mqxVersion,       MQX_VERSION );
#if (MQX_VERSION >= 250)
   MIB_set_const( mqxRevKernel,     GEN_REVISION            );
   MIB_set_const( mqxRevPSP,        PSP_REVISION            );
   MIB_set_const( mqxRevIO,         atoi(_mqx_io_revision)  );
   MIB_set_const( mqxRevBSP,        atoi(_mqx_bsp_revision) );
#endif
   MIB_set_ptr(   mqxCopyright,     DISPSTR, (uchar_ptr)_mqx_copyright           );
   MIB_set_ptr(   mqxDate,          DISPSTR, (uchar_ptr)_mqx_date                );
   MIB_set_const( mqxCPUType,       MQX_CPU                                      );
   MIB_set_const( mqxCPUEndian,     PSP_ENDIAN                                   );
   MIB_set_const( mqxCPUAddressing, PSP_MEMORY_ADDRESSING_CAPABILITY             );
   MIB_set_ptr(   mqxProcessorNum,  UINT, (uint_32_ptr)&kd_ptr->PROCESSOR_NUMBER );

   MIB_set_const( mqxConfigFloatingPointIO,      MQX_INCLUDE_FLOATING_POINT_IO        );
   MIB_set_const( mqxConfigInlineMacros,         MQX_USE_INLINE_MACROS                );
   MIB_set_const( mqxConfigKernelLogging,        MQX_KERNEL_LOGGING                   );
   MIB_set_const( mqxConfigMonitorStack,         MQX_MONITOR_STACK                    );
   MIB_set_const( mqxConfigTaskCreationBlocks,   MQX_TASK_CREATION_BLOCKS             );
   MIB_set_const( mqxConfigTaskDestruction,      MQX_TASK_DESTRUCTION                 );
   MIB_set_const( mqxConfigComponentDestruction, MQX_COMPONENT_DESTRUCTION            );
   MIB_set_const( mqxConfigCheckErrors,          MQX_CHECK_ERRORS                     );
   MIB_set_const( mqxConfigCheckValidity,        MQX_CHECK_VALIDITY                   );
   MIB_set_const( mqxConfigCheckAlloc,           MQX_CHECK_MEMORY_ALLOCATION_ERRORS   );
#if (MQX_VERSION >= 240) && (MQX_VERSION < 250)
   MIB_set_const( mqxConfig64BitInts,            MQX_COMPILER_SUPPORTS_64_BIT_NUMBERS );
#elif (MQX_VERSION >= 250)
   MIB_set_const( mqxConfig32BitQIDs,            MQX_USE_32BIT_MESSAGE_QIDS           );
#endif

   MIB_set_fn(    mqxTaskID,                     UINT    );
   MIB_set_fn(    mqxTaskCreator,                UINT    );
   MIB_set_fn(    mqxTaskName,                   DISPSTR );
   MIB_set_fn(    mqxTaskState,                  UINT    );
   MIB_set_fn(    mqxTaskErrorCode,              UINT    );
   MIB_set_fn(    mqxTaskSchedPriority,          UINT    );
   MIB_set_fn(    mqxTaskSchedHomePriority,      UINT    );
   MIB_set_fn(    mqxTaskSchedPolicy,            UINT    );
   MIB_set_fn(    mqxTaskSchedTimeSlice,         UINT    );
   MIB_set_fn(    mqxTaskStackSize,              UINT    );
   MIB_set_fn(    mqxTaskStackUsed,              UINT    );
   MIB_set_fn(    mqxTaskIOstdin,                DISPSTR );
   MIB_set_fn(    mqxTaskIOstdout,               DISPSTR );
   MIB_set_fn(    mqxTaskIOstderr,               DISPSTR );
   MIB_set_fn(    mqxTaskFlagFloatingPoint,      UINT    );
   MIB_set_fn(    mqxTaskFlagLoggingEnabled,     UINT    );
   MIB_set_fn(    mqxTaskFlagWatchdogEnabled,    UINT    );
   MIB_set_fn(    mqxTaskFlagPreemptionDisabled, UINT    );
/* End CR 850 */

   RTCSMIB_mib_add(&MIBNODE_psti);

} /* Endbody */

/* EOF */
